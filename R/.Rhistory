server <- function(input, output, session) {
# Track ratings
user_ratings <- reactiveVal(list())
filtered_books <- reactive({
if (input$search == "") {
unique(books, by = "title")
} else {
unique(books[grepl(tolower(input$search), tolower(title))], by = "title")
}
})
output$books_ui <- renderUI({
books_to_show <- filtered_books()
n <- min(60, nrow(books_to_show))
books_to_show <- books_to_show[1:n]
fluidRow(
lapply(seq_len(n), function(i) {
isbn <- books_to_show$item[i]
title <- books_to_show$title[i]
author <- books_to_show$author[i]
img_url <- paste0("https://covers.openlibrary.org/b/isbn/", isbn, "-M.jpg")
column(2,
tags$div(style = "text-align:center;",
tags$img(src = img_url, height = "150px"),
tags$p(strong(title)),
tags$p(em(author)),
prettyRadioButtons(
inputId = paste0("star_", isbn),
label = NULL,
choices = 1:5,
shape = "round",
outline = TRUE,
fill = TRUE,
status = "info",
inline = TRUE
)
)
)
})
)
})
observeEvent(input$get_recs, {
all_inputs <- reactiveValuesToList(input)
rated <- Filter(Negate(is.null), all_inputs[grepl("^star_", names(all_inputs))])
rated <- rated[rated != ""]
if (length(rated) < 5) {
output$recommendations <- renderTable({
data.frame(Message = "Please rate at least 5 books.")
})
return()
}
rating_values <- sapply(rated, as.numeric)
names(rating_values) <- sub("^star_", "", names(rating_values))
new_user <- rep(NA, ncol(ratingmat))
names(new_user) <- colnames(ratingmat)
matched <- intersect(names(rating_values), colnames(ratingmat))
new_user[matched] <- rating_values[matched]
new_user <- as(matrix(new_user, nrow = 1), "realRatingMatrix")
prediction <- predict(model, new_user, n = 5)
recs <- as(prediction, "list")[[1]]
if (length(recs) == 0) {
output$recommendations <- renderTable({
data.frame(Message = "No recommendations. Try rating different books.")
})
} else {
rec_info <- books[item %in% recs, .(Title = title, Author = author)]
output$recommendations <- renderTable(rec_info)
}
})
}
# Run app in external browser
shinyApp(ui = ui, server = server, options = list(launch.browser = TRUE))
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
devtools::install()
rlang::last_trace()
library(book-recommender)
?normalize_bx_rating_matrix
?create_bx_ubcf_model
runApp('hello.R')
library(hello)
?normalize_bx_rating_matrix
?create_bx_ubcf_model
#' Normalize the BX Book Rating Matrix
#'
#' This function filters and processes the BX-Book-Ratings data, converting it into a normalized realRatingMatrix.
#'
#' @param ratings A data.table with columns: user, item, rating.
#'
#' @return A normalized realRatingMatrix object.
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' Train a UBCF Recommender on BX Data
#'
#' This function creates a User-Based Collaborative Filtering model using a normalized realRatingMatrix.
#'
#' @param ratingmat A normalized realRatingMatrix object.
#'
#' @return A trained Recommender object.
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
roxygen2::roxygenize()
roxygen2::roxygenize()
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
library(bookrecommender)
?normalize_bx_rating_matrix
#' Normalize the BX Book Rating Matrix
#'
#' This function filters and processes the BX-Book-Ratings data, converting it into a normalized realRatingMatrix.
#'
#' @param ratings A data.table with columns: user, item, rating.
#'
#' @return A normalized realRatingMatrix object.
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' Train a UBCF Recommender on BX Data
#'
#' This function creates a User-Based Collaborative Filtering model using a normalized realRatingMatrix.
#'
#' @param ratingmat A normalized realRatingMatrix object.
#'
#' @return A trained Recommender object.
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
#' Normalize the BX Book Rating Matrix
#'
#' This function filters and processes the BX-Book-Ratings data, converting it into a normalized realRatingMatrix.
#'
#' @param ratings A data.table with columns: user, item, rating.
#'
#' @return A normalized realRatingMatrix object.
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' Train a UBCF Recommender on BX Data
#'
#' This function creates a User-Based Collaborative Filtering model using a normalized realRatingMatrix.
#'
#' @param ratingmat A normalized realRatingMatrix object.
#'
#' @return A trained Recommender object.
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
devtools::install()
library(bookrecommender)
?normalize_bx_rating_matrix
?create_bx_ubcf_model
#' Normalize the BX Book Rating Matrix
#'
#' This function filters and processes the BX-Book-Ratings data, converting it into a normalized realRatingMatrix.
#'
#' @param ratings A data.table with columns: user, item, rating.
#'
#' @return A normalized realRatingMatrix object.
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' Train a UBCF Recommender on BX Data
#'
#' This function creates a User-Based Collaborative Filtering model using a normalized realRatingMatrix.
#'
#' @param ratingmat A normalized realRatingMatrix object.
#'
#' @return A trained Recommender object.
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
#' Normalize the BX Book Rating Matrix
#'
#' This function filters and processes the BX-Book-Ratings data, converting it into a normalized realRatingMatrix.
#'
#' @param ratings A data.table with columns: user, item, rating.
#'
#' @return A normalized realRatingMatrix object.
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' Train a UBCF Recommender on BX Data
#'
#' This function creates a User-Based Collaborative Filtering model using a normalized realRatingMatrix.
#'
#' @param ratingmat A normalized realRatingMatrix object.
#'
#' @return A trained Recommender object.
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
#' Normalize the BX Book Rating Matrix
#'
#' This function filters and processes the BX-Book-Ratings data, converting it into a normalized realRatingMatrix.
#'
#' @param ratings A data.table with columns: user, item, rating.
#'
#' @return A normalized realRatingMatrix object.
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' Train a UBCF Recommender on BX Data
#'
#' This function creates a User-Based Collaborative Filtering model using a normalized realRatingMatrix.
#'
#' @param ratingmat A normalized realRatingMatrix object.
#'
#' @return A trained Recommender object.
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
#' Normalize the BX Book Rating Matrix
#'
#' This function filters and processes the BX-Book-Ratings data, converting it into a normalized realRatingMatrix.
#'
#' @param ratings A data.table with columns: user, item, rating.
#'
#' @return A normalized realRatingMatrix object.
#' @importFrom recommenderlab normalize realRatingMatrix
#' @importFrom data.table .N
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
normalize_bx_rating_matrix <- function(ratings) {
ratings <- ratings[rating > 0]
user_counts <- ratings[, .N, by = user][N >= 10]
ratings <- ratings[user %in% user_counts$user]
item_counts <- ratings[, .N, by = item][N >= 20]
ratings <- ratings[item %in% item_counts$item]
ratingmat <- as(ratings[, .(user, item, rating)], "realRatingMatrix")
ratingmat <- ratingmat[1:min(1000, nrow(ratingmat))]
normalize(ratingmat)
}
#' Train a UBCF Recommender on BX Data
#'
#' This function creates a User-Based Collaborative Filtering model using a normalized realRatingMatrix.
#'
#' @param ratingmat A normalized realRatingMatrix object.
#'
#' @return A trained Recommender object.
#' @importFrom recommenderlab Recommender
#' @export
#'
#' @examples
#' library(data.table)
#' ratings <- fread("BX-Book-Ratings.csv", sep = ";", quote = "\"", encoding = "Latin-1")
#' setnames(ratings, c("User-ID", "ISBN", "Book-Rating"), c("user", "item", "rating"))
#' ratings <- ratings[rating > 0]
#' norm_mat <- normalize_bx_rating_matrix(ratings)
#' model <- create_bx_ubcf_model(norm_mat)
create_bx_ubcf_model <- function(ratingmat) {
Recommender(ratingmat, method = "UBCF")
}
roxygen2::roxygenize()
